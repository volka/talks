
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.4.1.0
//   File : serialize_reflection.h
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------

#pragma once

#include "serialize_types.h"
#include <bond/core/reflection.h>

namespace uti
{
namespace serialize
{
    //
    // ints
    //
    struct ints::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_id_metadata;
        private: static const bond::Metadata s_int1_metadata;
        private: static const bond::Metadata s_int2_metadata;
        private: static const bond::Metadata s_int3_metadata;
        private: static const bond::Metadata s_int4_metadata;

        public: struct var
        {
            // id
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                ints,
                int64_t,
                &ints::id,
                &s_id_metadata
            > id;
        
            // int1
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                ints,
                int64_t,
                &ints::int1,
                &s_int1_metadata
            > int1;
        
            // int2
            typedef bond::reflection::FieldTemplate<
                2,
                bond::reflection::optional_field_modifier,
                ints,
                int64_t,
                &ints::int2,
                &s_int2_metadata
            > int2;
        
            // int3
            typedef bond::reflection::FieldTemplate<
                3,
                bond::reflection::optional_field_modifier,
                ints,
                int32_t,
                &ints::int3,
                &s_int3_metadata
            > int3;
        
            // int4
            typedef bond::reflection::FieldTemplate<
                4,
                bond::reflection::optional_field_modifier,
                ints,
                int32_t,
                &ints::int4,
                &s_int4_metadata
            > int4;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::int4>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::int3>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::int2>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::int1>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::id>::type fields5;

        public: typedef fields5::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("ints", "uti.serialize.ints",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // mixed
    //
    struct mixed::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_id_metadata;
        private: static const bond::Metadata s_int1_metadata;
        private: static const bond::Metadata s_int2_metadata;
        private: static const bond::Metadata s_uint1_metadata;
        private: static const bond::Metadata s_float1_metadata;
        private: static const bond::Metadata s_text1_metadata;
        private: static const bond::Metadata s_enum1_metadata;

        public: struct var
        {
            // id
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                mixed,
                int32_t,
                &mixed::id,
                &s_id_metadata
            > id;
        
            // int1
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                mixed,
                int32_t,
                &mixed::int1,
                &s_int1_metadata
            > int1;
        
            // int2
            typedef bond::reflection::FieldTemplate<
                2,
                bond::reflection::optional_field_modifier,
                mixed,
                int64_t,
                &mixed::int2,
                &s_int2_metadata
            > int2;
        
            // uint1
            typedef bond::reflection::FieldTemplate<
                3,
                bond::reflection::optional_field_modifier,
                mixed,
                uint32_t,
                &mixed::uint1,
                &s_uint1_metadata
            > uint1;
        
            // float1
            typedef bond::reflection::FieldTemplate<
                4,
                bond::reflection::optional_field_modifier,
                mixed,
                double,
                &mixed::float1,
                &s_float1_metadata
            > float1;
        
            // text1
            typedef bond::reflection::FieldTemplate<
                5,
                bond::reflection::optional_field_modifier,
                mixed,
                std::string,
                &mixed::text1,
                &s_text1_metadata
            > text1;
        
            // enum1
            typedef bond::reflection::FieldTemplate<
                6,
                bond::reflection::optional_field_modifier,
                mixed,
                ::uti::serialize::Enum1,
                &mixed::enum1,
                &s_enum1_metadata
            > enum1;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::enum1>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::text1>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::float1>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::uint1>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::int2>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::int1>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::id>::type fields7;

        public: typedef fields7::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("mixed", "uti.serialize.mixed",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // complex
    //
    struct complex::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_id_metadata;
        private: static const bond::Metadata s_text1_metadata;
        private: static const bond::Metadata s_text2_metadata;
        private: static const bond::Metadata s_text3_metadata;
        private: static const bond::Metadata s_int1_metadata;
        private: static const bond::Metadata s_int2_metadata;
        private: static const bond::Metadata s_int3_metadata;
        private: static const bond::Metadata s_text4_metadata;
        private: static const bond::Metadata s_enum1_metadata;
        private: static const bond::Metadata s_float1_metadata;
        private: static const bond::Metadata s_int4_metadata;
        private: static const bond::Metadata s_uint1_metadata;
        private: static const bond::Metadata s_uint2_metadata;
        private: static const bond::Metadata s_int5_metadata;
        private: static const bond::Metadata s_int6_metadata;
        private: static const bond::Metadata s_float2_metadata;
        private: static const bond::Metadata s_text5_metadata;

        public: struct var
        {
            // id
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                complex,
                int64_t,
                &complex::id,
                &s_id_metadata
            > id;
        
            // text1
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                complex,
                std::string,
                &complex::text1,
                &s_text1_metadata
            > text1;
        
            // text2
            typedef bond::reflection::FieldTemplate<
                2,
                bond::reflection::optional_field_modifier,
                complex,
                std::string,
                &complex::text2,
                &s_text2_metadata
            > text2;
        
            // text3
            typedef bond::reflection::FieldTemplate<
                3,
                bond::reflection::optional_field_modifier,
                complex,
                std::string,
                &complex::text3,
                &s_text3_metadata
            > text3;
        
            // int1
            typedef bond::reflection::FieldTemplate<
                4,
                bond::reflection::optional_field_modifier,
                complex,
                int32_t,
                &complex::int1,
                &s_int1_metadata
            > int1;
        
            // int2
            typedef bond::reflection::FieldTemplate<
                5,
                bond::reflection::optional_field_modifier,
                complex,
                int32_t,
                &complex::int2,
                &s_int2_metadata
            > int2;
        
            // int3
            typedef bond::reflection::FieldTemplate<
                6,
                bond::reflection::optional_field_modifier,
                complex,
                int32_t,
                &complex::int3,
                &s_int3_metadata
            > int3;
        
            // text4
            typedef bond::reflection::FieldTemplate<
                7,
                bond::reflection::optional_field_modifier,
                complex,
                std::string,
                &complex::text4,
                &s_text4_metadata
            > text4;
        
            // enum1
            typedef bond::reflection::FieldTemplate<
                8,
                bond::reflection::optional_field_modifier,
                complex,
                ::uti::serialize::Enum1,
                &complex::enum1,
                &s_enum1_metadata
            > enum1;
        
            // float1
            typedef bond::reflection::FieldTemplate<
                9,
                bond::reflection::optional_field_modifier,
                complex,
                double,
                &complex::float1,
                &s_float1_metadata
            > float1;
        
            // int4
            typedef bond::reflection::FieldTemplate<
                10,
                bond::reflection::optional_field_modifier,
                complex,
                int64_t,
                &complex::int4,
                &s_int4_metadata
            > int4;
        
            // uint1
            typedef bond::reflection::FieldTemplate<
                11,
                bond::reflection::optional_field_modifier,
                complex,
                uint32_t,
                &complex::uint1,
                &s_uint1_metadata
            > uint1;
        
            // uint2
            typedef bond::reflection::FieldTemplate<
                12,
                bond::reflection::optional_field_modifier,
                complex,
                uint64_t,
                &complex::uint2,
                &s_uint2_metadata
            > uint2;
        
            // int5
            typedef bond::reflection::FieldTemplate<
                13,
                bond::reflection::optional_field_modifier,
                complex,
                int64_t,
                &complex::int5,
                &s_int5_metadata
            > int5;
        
            // int6
            typedef bond::reflection::FieldTemplate<
                14,
                bond::reflection::optional_field_modifier,
                complex,
                int32_t,
                &complex::int6,
                &s_int6_metadata
            > int6;
        
            // float2
            typedef bond::reflection::FieldTemplate<
                15,
                bond::reflection::optional_field_modifier,
                complex,
                double,
                &complex::float2,
                &s_float2_metadata
            > float2;
        
            // text5
            typedef bond::reflection::FieldTemplate<
                16,
                bond::reflection::optional_field_modifier,
                complex,
                std::string,
                &complex::text5,
                &s_text5_metadata
            > text5;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::text5>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::float2>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::int6>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::int5>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::uint2>::type fields5;
        private: typedef boost::mpl::push_front<fields5, var::uint1>::type fields6;
        private: typedef boost::mpl::push_front<fields6, var::int4>::type fields7;
        private: typedef boost::mpl::push_front<fields7, var::float1>::type fields8;
        private: typedef boost::mpl::push_front<fields8, var::enum1>::type fields9;
        private: typedef boost::mpl::push_front<fields9, var::text4>::type fields10;
        private: typedef boost::mpl::push_front<fields10, var::int3>::type fields11;
        private: typedef boost::mpl::push_front<fields11, var::int2>::type fields12;
        private: typedef boost::mpl::push_front<fields12, var::int1>::type fields13;
        private: typedef boost::mpl::push_front<fields13, var::text3>::type fields14;
        private: typedef boost::mpl::push_front<fields14, var::text2>::type fields15;
        private: typedef boost::mpl::push_front<fields15, var::text1>::type fields16;
        private: typedef boost::mpl::push_front<fields16, var::id>::type fields17;

        public: typedef fields17::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("complex", "uti.serialize.complex",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // container_vec
    //
    struct container_vec::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_id_metadata;
        private: static const bond::Metadata s_int1_metadata;
        private: static const bond::Metadata s_text1_metadata;
        private: static const bond::Metadata s_stringvec_metadata;
        private: static const bond::Metadata s_intvec_metadata;

        public: struct var
        {
            // id
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                container_vec,
                int32_t,
                &container_vec::id,
                &s_id_metadata
            > id;
        
            // int1
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                container_vec,
                int64_t,
                &container_vec::int1,
                &s_int1_metadata
            > int1;
        
            // text1
            typedef bond::reflection::FieldTemplate<
                2,
                bond::reflection::optional_field_modifier,
                container_vec,
                std::string,
                &container_vec::text1,
                &s_text1_metadata
            > text1;
        
            // stringvec
            typedef bond::reflection::FieldTemplate<
                3,
                bond::reflection::optional_field_modifier,
                container_vec,
                std::vector<std::string>,
                &container_vec::stringvec,
                &s_stringvec_metadata
            > stringvec;
        
            // intvec
            typedef bond::reflection::FieldTemplate<
                4,
                bond::reflection::optional_field_modifier,
                container_vec,
                std::vector<int64_t>,
                &container_vec::intvec,
                &s_intvec_metadata
            > intvec;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::intvec>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::stringvec>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::text1>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::int1>::type fields4;
        private: typedef boost::mpl::push_front<fields4, var::id>::type fields5;

        public: typedef fields5::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("container_vec", "uti.serialize.container_vec",
                bond::reflection::Attributes()
            );
        }
    };
    

    //
    // container_map
    //
    struct container_map::Schema
    {
        typedef bond::no_base base;

        static const bond::Metadata metadata;
        
        private: static const bond::Metadata s_id_metadata;
        private: static const bond::Metadata s_int1_metadata;
        private: static const bond::Metadata s_text1_metadata;
        private: static const bond::Metadata s_map1_metadata;

        public: struct var
        {
            // id
            typedef bond::reflection::FieldTemplate<
                0,
                bond::reflection::optional_field_modifier,
                container_map,
                int32_t,
                &container_map::id,
                &s_id_metadata
            > id;
        
            // int1
            typedef bond::reflection::FieldTemplate<
                1,
                bond::reflection::optional_field_modifier,
                container_map,
                int64_t,
                &container_map::int1,
                &s_int1_metadata
            > int1;
        
            // text1
            typedef bond::reflection::FieldTemplate<
                2,
                bond::reflection::optional_field_modifier,
                container_map,
                std::string,
                &container_map::text1,
                &s_text1_metadata
            > text1;
        
            // map1
            typedef bond::reflection::FieldTemplate<
                3,
                bond::reflection::optional_field_modifier,
                container_map,
                std::map<int32_t, std::string>,
                &container_map::map1,
                &s_map1_metadata
            > map1;
        };

        private: typedef boost::mpl::list<> fields0;
        private: typedef boost::mpl::push_front<fields0, var::map1>::type fields1;
        private: typedef boost::mpl::push_front<fields1, var::text1>::type fields2;
        private: typedef boost::mpl::push_front<fields2, var::int1>::type fields3;
        private: typedef boost::mpl::push_front<fields3, var::id>::type fields4;

        public: typedef fields4::type fields;
        
        
        static bond::Metadata GetMetadata()
        {
            return bond::reflection::MetadataInit("container_map", "uti.serialize.container_map",
                bond::reflection::Attributes()
            );
        }
    };
    

    
} // namespace serialize
} // namespace uti
